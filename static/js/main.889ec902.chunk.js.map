{"version":3,"sources":["ServerPicker.tsx","PismoClient.ts","LoadingScreen.tsx","BranchesPicker.tsx","Differator.ts","PismoTypes.ts","AutoMerger.ts","TreeFilesComparer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["localStorageKey","ServerPicker","props","serverNameInput","serverAddressInput","state","serversList","React","createRef","serverState","setStatus","status","setState","url","address","fetchResponse","fetch","ok","newServers","serversString","window","localStorage","getItem","JSON","parse","getServersListFromLocalStorage","newServer","oldServer","name","shouldAdd","push","checkServerStatus","this","storageEvent","key","updateStateFromLocalStorage","addEventListener","storageEventListener","removeEventListener","server","setItem","stringify","index","indexOf","splice","className","style","display","border","ref","onClick","current","value","addServer","map","cursor","onServerPicked","removeServer","Component","PismoClient","hostname","_makeFetch","includeRemotes","response","json","methodId","params","method","headers","body","LoadingScreen","finished","promise","then","BranchesPicker","trees","getTreesResponse","console","error","length","left","treename","right","groupId","tree","id","type","checked","onChange","event","target","newState","renderBranches","onBranchesPicked","leftBranchName","rightBranchName","Differator","baseTree","otherTree","baseIndex","otherIndex","treeFile","files","getNextFile","one","two","baseFile","getNextBaseFile","otherFile","getNextOtherFile","path","mtimeS","mtimeNs","size","hash","areHeadsDifferent","goToNextDiff","hasNext","fileInfo","mirrorBaseToOther","output","differator","next","second","operator","operands","relativePath","Error","oneWayAdd","log","TreeFilesComparer","rows","leftTreeFile","rightTreeFile","lastPathModified","hashToDuplicateFiles","expandedPaths","Set","viewStyle","pathToMergeOperations","Map","hashToDupeData","leftTreeWithName","find","rightTreeWithName","treeFileOne","treefile","treeFileTwo","leftFiles","rightFiles","leftIndex","rightIndex","leftFilename","rightFilename","hashToFiles","addFile","file","side","filesWithHash","get","set","forEach","multipleFilesInOneSide","singularFilesHaveDifferentPath","baseBranch","otherBranch","operations","addMergeOperations","mergeOperations","cpOperations","rmOperations","touchOperations","mvOperations","operation","concat","dupeData","mergeFile","generateMergeFile","catch","outputString","blob","Blob","anchor","document","createElement","download","href","URL","createObjectURL","click","has","delete","add","newOperations","overwriteOperations","twoWayMerge","modifiedPaths","alphabeticalModifiedPaths","sort","pathsToKeep","lastIndex","i","save","apply","renderViewPicker","renderPresetPicker","revertChangesBelowLastChange","row","getMergeOperationsForPath","expanded","diffState","mergeState","renderButtonRowItems","setMergeOperationsForPath","deleteButton","deleteOperations","delet","pickLeftButton","pickRightButton","renderStatusIcon","leftIcon","rightIcon","color","text","tooltipText","arrowIcon","title","renderDetailedRowCell","otherFileInfo","fileInfoToDetailFields","detailFields","Date","toISOString","fileInfoToDateString","filesize","customAttributeNameToValue","Object","entries","otherDetailFields","Array","from","toggleExpanded","leftWastedSpace","rightWastedSpace","chooseButton","addOperationsForSide","sideToProtocol","deleteFile","selectedPath","choosePath","undoButton","button","disabled","getWastedSpace","a","b","aWastedSpace","bWastedSpace","chooseLeftDuplicates","chooseRightDuplicates","flatMap","renderDuplicatesRow","renderBanner","renderDuplicates","renderRow","App","currentComponent","run","stack","Promise","resolve","serverPicker","serverAddress","pismoClient","getTreesPromise","getTrees","branchesPicker","comparer","isLocalhost","Boolean","location","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","getElementById","process","origin","contentType","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.889ec902.chunk.js","sourcesContent":["import React, { RefObject } from 'react';\r\nimport './ServerPicker.css';\r\n\r\ninterface Props {\r\n  onServerPicked: (serverAddress: string) => void;\r\n}\r\n\r\ninterface Server {\r\n  name: string;\r\n  address: string;\r\n}\r\n\r\nconst localStorageKey = 'pismo-server-picker-servers';\r\n\r\nfunction getServersListFromLocalStorage(): Array<Server> {\r\n  const serversString = window.localStorage.getItem(localStorageKey);\r\n  if (!serversString) {\r\n    return [];\r\n  }\r\n  return JSON.parse(serversString);\r\n}\r\n\r\ninterface ServerState {\r\n  name: string;\r\n  address: string;\r\n  status?: string;\r\n}\r\n\r\ninterface ServerPickerState {\r\n  serversList: Array<ServerState>;\r\n}\r\n\r\nclass ServerPicker extends React.Component<Props, ServerPickerState> {\r\n  serverNameInput: RefObject<HTMLInputElement>;\r\n  serverAddressInput: RefObject<HTMLInputElement>;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      serversList: []\r\n    };\r\n\r\n    this.serverNameInput = React.createRef();\r\n    this.serverAddressInput = React.createRef();\r\n  }\r\n\r\n  async checkServerStatus(serverState: ServerState) {\r\n    const setStatus = (status: string) => {\r\n      serverState.status = status;\r\n      this.setState(this.state);\r\n    };\r\n\r\n    setStatus('pinging...');\r\n\r\n    const url = `http://${serverState.address}/version`;\r\n    let fetchResponse = null;\r\n    try {\r\n      fetchResponse = await fetch(url);\r\n    } catch (error) {\r\n      setStatus('offline: ' + error);\r\n      return;\r\n    }\r\n\r\n    if (!fetchResponse.ok) {\r\n      setStatus('offline: !fetchResponse.ok');\r\n      return;\r\n    }\r\n\r\n    setStatus('online!');\r\n  }\r\n\r\n  updateStateFromLocalStorage() {\r\n    const newServers = getServersListFromLocalStorage();\r\n    for (const newServer of newServers) {\r\n      const shouldAdd = () => {\r\n        for (const oldServer of this.state.serversList) {\r\n          if (oldServer.name === newServer.name && oldServer.address === newServer.address) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      };\r\n      if (shouldAdd()) {\r\n        this.state.serversList.push(newServer);\r\n        this.checkServerStatus(newServer);\r\n      }\r\n    }\r\n    this.setState(this.state);\r\n  }\r\n\r\n  storageEventListener(storageEvent: StorageEvent) {\r\n    if (storageEvent.key === localStorageKey)\r\n      this.updateStateFromLocalStorage();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('storage', this.storageEventListener);\r\n    this.updateStateFromLocalStorage();\r\n  }\r\n  componentWillUnmount() {\r\n    window.removeEventListener('storage', this.storageEventListener);\r\n  }\r\n\r\n  addServer(server: Server) {\r\n    this.state.serversList.push(server);\r\n    window.localStorage.setItem(localStorageKey, JSON.stringify(this.state.serversList));\r\n    this.checkServerStatus(server);\r\n  }\r\n\r\n  removeServer(server: Server) {\r\n    const index = this.state.serversList.indexOf(server);\r\n    if (index > -1)\r\n      this.state.serversList.splice(index, 1);\r\n    window.localStorage.setItem(localStorageKey, JSON.stringify(this.state.serversList));\r\n    this.setState(this.state);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='serverpicker'>\r\n        <div style={{display: 'block', border: '1px solid black'}}>\r\n          Add a server:\r\n          <div>\r\n            <label>\r\n              Server Name (optional)\r\n              <input ref={this.serverNameInput}></input>\r\n            </label>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              Server Address\r\n              <input ref={this.serverAddressInput}></input>\r\n            </label>\r\n          </div>\r\n          <button onClick={() => {\r\n            const newServer = {\r\n              name: this.serverNameInput.current ? this.serverNameInput.current.value : '',\r\n              address: this.serverAddressInput.current ? this.serverAddressInput.current.value : ''\r\n            };\r\n            this.addServer(newServer);\r\n          }}>\r\n            Add\r\n          </button>\r\n        </div>\r\n\r\n        <div>\r\n          {this.state.serversList.map(server => {\r\n            return (\r\n              <div style={{border: '1px solid'}} key={`${server.name}-${server.address}`}>\r\n                <div style={{cursor: 'pointer'}}\r\n                    onClick={() => this.props.onServerPicked(server.address)}>\r\n                  {server.name ? <div>name: {server.name}</div> : ''}\r\n                  <div>address: {server.address}</div>\r\n                  <div>status: {server.status}</div>\r\n                </div>\r\n                <button onClick={() => {\r\n                  this.removeServer(server);\r\n                }}>\r\n                  Remove\r\n                </button>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ServerPicker;","class PismoClient {\r\n  hostname: string;\r\n  constructor(hostname: string) {\r\n    this.hostname = hostname;\r\n  }\r\n\r\n  async getTrees() {\r\n    //return (await this._makeFetch('get-trees', {})).json();\r\n    const response = await this._makeFetch('get-trees', {includeRemotes: true});\r\n    /*window.response = response;\r\n    console.log('response: ', response);*/\r\n    /*const text = await response.text();\r\n    console.log('response: ' + text);\r\n    return JSON.parse(text);*/\r\n    return await response.json();\r\n  }\r\n\r\n  async _makeFetch(methodId: string, params: object) {\r\n    return await fetch('http://' + this.hostname + '/api', {\r\n      method: 'POST',\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      },\r\n      body: JSON.stringify({\r\n        method: methodId,\r\n        params\r\n      })\r\n    });\r\n  }\r\n}\r\n\r\nexport default PismoClient;","import React from 'react';\r\n\r\ninterface Props {\r\n  promise: Promise<void>;\r\n}\r\n\r\nclass LoadingScreen extends React.Component<Props> {\r\n  state: {\r\n    finished: boolean\r\n  }\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      finished: false\r\n    };\r\n\r\n    props.promise.then(() => {\r\n      this.setState({\r\n        finished: true\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.finished) {\r\n      return (\r\n        <p>finished!</p>\r\n      );\r\n    } else {\r\n      return (\r\n        <p>loading...</p>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default LoadingScreen;","import React from 'react';\r\nimport { GetTreesResponse } from './PismoTypes';\r\n\r\ninterface Props {\r\n  getTreesResponse: GetTreesResponse;\r\n  onBranchesPicked: (branchNames: {leftBranchName: string, rightBranchName: string}) => void;\r\n}\r\n\r\nclass BranchesPicker extends React.Component<Props> {\r\n  state: {\r\n    left: string;\r\n    right: string;\r\n  };\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    const {trees} = props.getTreesResponse;\r\n    if (!trees) console.error('!trees');\r\n    if (!trees.length) console.error('!trees.length');\r\n\r\n    this.state = {\r\n      left: trees[0].treename,\r\n      right: trees[0].treename\r\n    };\r\n  }\r\n\r\n  renderBranches(groupId: 'left'|'right') {\r\n    return this.props.getTreesResponse.trees.map((tree, index) => {\r\n      const { treename } = tree;\r\n      const id = `${groupId}-${treename}`;\r\n\r\n      return (\r\n        <div key={id}>\r\n          <label>\r\n            <input\r\n              type=\"radio\"\r\n              name={groupId}\r\n              checked={this.state[groupId] === treename}\r\n              onChange={event => {\r\n                if (!event.target.checked)\r\n                  return;\r\n                const newState: {left?: string; right?: string;} = {};\r\n                newState[groupId] = treename;\r\n                this.setState(newState);\r\n              }} />\r\n            {treename}\r\n          </label>\r\n        </div>\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"branches-picker\">\r\n        <div className=\"split-container\">\r\n          <div className=\"split-child\">\r\n            {this.renderBranches('left')}\r\n          </div>\r\n          <div className=\"split-child\">\r\n            {this.renderBranches('right')}\r\n          </div>\r\n        </div>\r\n        <div className=\"center\">\r\n          <button onClick={event => {\r\n              this.props.onBranchesPicked({\r\n                leftBranchName: this.state.left,\r\n                rightBranchName: this.state.right\r\n              });\r\n            }}>\r\n            ikuzo\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default BranchesPicker;","import { TreeFile, FileInfo, areFilesEqual } from \"./PismoTypes\";\r\n\r\ntype Next = Array<{treeFile: TreeFile, fileInfo: FileInfo}>;\r\n\r\nexport default class Differator {\r\n  baseTree: TreeFile;\r\n  otherTree: TreeFile;\r\n  baseIndex: number;\r\n  otherIndex: number;\r\n\r\n  constructor(baseTree: TreeFile, otherTree: TreeFile) {\r\n    this.baseTree = baseTree;\r\n    this.otherTree = otherTree;\r\n    this.baseIndex = 0;\r\n    this.otherIndex = 0;\r\n  }\r\n\r\n  getNextFile(treeFile: TreeFile, index: number) {\r\n    return index < treeFile.files.length\r\n        ? treeFile.files[index]\r\n        : null;\r\n  }\r\n\r\n  getNextBaseFile() {\r\n    return this.getNextFile(this.baseTree, this.baseIndex);\r\n  }\r\n\r\n  getNextOtherFile() {\r\n    return this.getNextFile(this.otherTree, this.otherIndex);\r\n  }\r\n\r\n  areHeadsDifferent() {\r\n    const baseFile = this.getNextBaseFile();\r\n    const otherFile = this.getNextOtherFile();\r\n    if (!baseFile || !otherFile)\r\n      return true; // TODO not always true if both are null?\r\n\r\n    return !areFilesEqual(baseFile, otherFile);\r\n  }\r\n\r\n  goToNextDiff() {\r\n    while (!this.areHeadsDifferent()) {\r\n      this.baseIndex++;\r\n      this.otherIndex++;\r\n    }\r\n  }\r\n\r\n  hasNext() {\r\n    this.goToNextDiff();\r\n    return this.baseIndex < this.baseTree.files.length\r\n      || this.otherIndex < this.otherTree.files.length;\r\n  }\r\n\r\n  next(): Next|null {\r\n    if (!this.hasNext())\r\n      return null;\r\n    // calling hasNext() triggers goToNextDiff(), so heads are ready\r\n    const baseFile = this.getNextBaseFile();\r\n    const otherFile = this.getNextOtherFile();\r\n\r\n    if (!otherFile || (baseFile && baseFile.path < otherFile.path)) {\r\n      this.baseIndex++;\r\n      return [{\r\n        treeFile: this.baseTree,\r\n        fileInfo: baseFile as FileInfo // TODO why do i have to typecast this?\r\n      }];\r\n    } else if (!baseFile || otherFile.path < baseFile.path) {\r\n      this.otherIndex++;\r\n      return [{\r\n        treeFile: this.otherTree,\r\n        fileInfo: otherFile\r\n      }];\r\n    } else {\r\n      this.baseIndex++;\r\n      this.otherIndex++;\r\n      return [{\r\n        treeFile: this.baseTree,\r\n        fileInfo: baseFile\r\n      }, {\r\n        treeFile: this.otherTree,\r\n        fileInfo: otherFile\r\n      }];\r\n    }\r\n  }\r\n};","export interface FileInfo {\r\n  path: string;\r\n  mtimeS: number;\r\n  mtimeNs: number;\r\n  size: number;\r\n  hash: string;\r\n  customAttributeNameToValue: {[x: string]: string};\r\n}\r\n\r\nexport function areFilesEqual(one: FileInfo, two: FileInfo): boolean {\r\n  return one.path === two.path\r\n    && one.mtimeS === two.mtimeS\r\n    && one.mtimeNs === two.mtimeNs\r\n    && one.size === two.size\r\n    && one.hash === two.hash;\r\n}\r\n\r\nexport interface TreeFile {\r\n  path: string;\r\n  lastUpdated: number;\r\n  files: Array<FileInfo>;\r\n  customAttributeNameToCommand: {[x: string]: string};\r\n}\r\n\r\nexport interface Operation {\r\n  operator: 'rm'|'cp'|'touch'|'mv';\r\n  operands: Array<{\r\n    tree: 'base'|'other';\r\n    relativePath: string;\r\n  }>;\r\n}\r\nexport interface MergeFile {\r\n  baseBranch: string;\r\n  otherBranch: string;\r\n  operations: Array<Operation>;\r\n}\r\n\r\nexport interface GetTreesRequest {\r\n  includeRemotes: boolean;\r\n}\r\nexport interface GetTreesResponse {\r\n  trees: Array<{\r\n    treename: string;\r\n    treefile: TreeFile;\r\n  }>;\r\n}","import { TreeFile, Operation, FileInfo } from \"./PismoTypes\";\r\nimport Differator from \"./Differator\";\r\n\r\ntype Next = Array<{treeFile: TreeFile, fileInfo: FileInfo}>;\r\n\r\nexport function mirrorBaseToOther(baseTree: TreeFile, otherTree: TreeFile): Array<Operation> {\r\n  const output: Array<Operation> = [];\r\n\r\n  const differator = new Differator(baseTree, otherTree);\r\n  while (differator.hasNext()) {\r\n    // TODO redesign this to not have to type cast\r\n    const [{treeFile, fileInfo}, second] = differator.next() as Next;\r\n\r\n    if (second) {\r\n      output.push({\r\n        operator: second.fileInfo.hash === fileInfo.hash ? 'touch' : 'cp',\r\n        operands: [{tree: 'base', relativePath: fileInfo.path},\r\n                   {tree: 'other', relativePath: second.fileInfo.path}]\r\n      });\r\n\r\n    } else if (treeFile === baseTree) {\r\n      output.push({\r\n        operator: 'cp',\r\n        operands: [{tree: 'base', relativePath: fileInfo.path},\r\n                   {tree: 'other', relativePath: fileInfo.path}]\r\n      });\r\n\r\n    } else if (treeFile === otherTree) {\r\n      output.push({\r\n        operator: 'rm',\r\n        operands: [{tree: 'other', relativePath: fileInfo.path}]\r\n      });\r\n\r\n    } else {\r\n      throw new Error('this should never happen');\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nexport function twoWayMerge(baseTree: TreeFile, otherTree: TreeFile): Array<Operation> {\r\n  const output: Array<Operation> = [];\r\n\r\n  const differator = new Differator(baseTree, otherTree);\r\n  while (differator.hasNext()) {\r\n    const [{treeFile, fileInfo}, second] = differator.next() as Next;\r\n\r\n    if (second) {\r\n      // TODO how can this be properly represented in a merge file?\r\n      output.push({\r\n        operator: second.fileInfo.hash === fileInfo.hash ? 'touch' : 'cp',\r\n        operands: [{tree: 'base', relativePath: fileInfo.path},\r\n                   {tree: 'other', relativePath: second.fileInfo.path}]\r\n      });\r\n\r\n    } else if (treeFile === baseTree) {\r\n      output.push({\r\n        operator: 'cp',\r\n        operands: [{tree: 'base', relativePath: fileInfo.path},\r\n                   {tree: 'other', relativePath: fileInfo.path}]\r\n      });\r\n\r\n    } else if (treeFile === otherTree) {\r\n      output.push({\r\n        operator: 'cp',\r\n        // TODO should this be this way? i should write a test for this or something\r\n        operands: [{tree: 'other', relativePath: fileInfo.path},\r\n                   {tree: 'base', relativePath: fileInfo.path}]\r\n      });\r\n\r\n    } else {\r\n      throw new Error('this should never happen');\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nexport function oneWayAdd(baseTree: TreeFile, otherTree: TreeFile): Array<Operation> {\r\n  const output: Array<Operation> = [];\r\n\r\n  const differator = new Differator(baseTree, otherTree);\r\n  while (differator.hasNext()) {\r\n    const [{treeFile, fileInfo}, second] = differator.next() as Next;\r\n\r\n    if (second) {\r\n      console.log('warning: file found on both sides: \"' + fileInfo.path + '\", using base');\r\n      output.push({\r\n        operator: second.fileInfo.hash === fileInfo.hash ? 'touch' : 'cp',\r\n        operands: [{tree: 'base', relativePath: fileInfo.path},\r\n                   {tree: 'other', relativePath: second.fileInfo.path}]\r\n      });\r\n    } else if (treeFile === baseTree) {\r\n      output.push({\r\n        operator: 'cp',\r\n        operands: [{tree: 'base', relativePath: fileInfo.path},\r\n                   {tree: 'other', relativePath: fileInfo.path}]\r\n      });\r\n    } else if (treeFile === otherTree) {\r\n      // do nothing, thats the point of this style of merge.\r\n    } else {\r\n      throw new Error('this should never happen');\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nexport function deduplicate(baseTree: TreeFile, otherTree: TreeFile): Array<Operation> {\r\n  const output: Array<Operation> = [];\r\n\r\n  type Files = {left: Array<FileInfo>, right: Array<FileInfo>};\r\n  const hashToFiles: Map<string, Files> = new Map();\r\n  const getFileForHash = (hash: string): Files => {\r\n    if (!hashToFiles.has(hash))\r\n      hashToFiles.set(hash, {left: [], right: []});\r\n    return hashToFiles.get(hash) as Files;\r\n  }\r\n  for (const file of baseTree.files)\r\n    getFileForHash(file.hash).left.push(file);\r\n  for (const file of otherTree.files)\r\n    getFileForHash(file.hash).right.push(file);\r\n\r\n  hashToFiles.forEach((files, hash) => {\r\n    const desiredPath = files.left.length\r\n      ? files.left[0].path\r\n      : files.right[0].path;\r\n\r\n    const doSide = (side: 'left'|'right') => {\r\n      const tree: 'base'|'other' = side === 'left' ? 'base' : 'other';\r\n      if (files[side].find(file => file.path === desiredPath)) {\r\n        // delete everything but the desired one\r\n        for (const file of files[side]) {\r\n          if (file.path === desiredPath)\r\n            continue;\r\n          output.push({\r\n            operator: 'rm',\r\n            operands: [{\r\n              tree,\r\n              relativePath: file.path\r\n            }]\r\n          })\r\n        }\r\n\r\n      } else {\r\n        // move the first left to the desired spot, delete the rest\r\n        output.push({\r\n          operator: 'mv',\r\n          operands: [{\r\n            tree,\r\n            relativePath: files[side][0].path\r\n          }, {\r\n            tree,\r\n            relativePath: desiredPath\r\n          }]\r\n        })\r\n        for (let i = 1; i < files[side].length; i++) {\r\n          output.push({\r\n            operator: 'rm',\r\n            operands: [{\r\n              tree,\r\n              relativePath: files[side][i].path\r\n            }]\r\n          });\r\n        }\r\n      }\r\n    };\r\n\r\n    doSide('left');\r\n    doSide('right');\r\n  });\r\n\r\n  return output;\r\n}","import React from 'react';\r\nimport { GetTreesResponse, FileInfo, Operation, MergeFile, TreeFile } from './PismoTypes';\r\nimport './TreeFilesComparer.css';\r\nimport './DataGrid.css';\r\nimport filesize from 'filesize';\r\nimport { mirrorBaseToOther, twoWayMerge, oneWayAdd } from './AutoMerger';\r\n\r\ninterface Props {\r\n  getTreesResponse: GetTreesResponse;\r\n  leftBranchName: string;\r\n  rightBranchName: string;\r\n  hostname: string;\r\n}\r\ninterface DupeData {\r\n  operations: Array<Operation>;\r\n  selectedPath: string;\r\n}\r\n\r\nclass TreeFilesComparer extends React.Component<Props> {\r\n  rows: Array<{\r\n    left?: FileInfo;\r\n    right?: FileInfo;\r\n  }>;\r\n\r\n  state: {\r\n    expandedPaths: Set<string>;\r\n    viewStyle: 'all'|'onlyDiff'|'onlyChanges'|'onlyDuplicates';\r\n    pathToMergeOperations: Map<string, Array<Operation>>;\r\n    hashToDupeData: Map<string, DupeData>;\r\n  };\r\n\r\n  leftTreeFile: TreeFile;\r\n  rightTreeFile: TreeFile;\r\n  lastPathModified?: string;\r\n  hashToDuplicateFiles: Map<string, {left: Array<FileInfo>, right: Array<FileInfo>}>;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      expandedPaths: new Set(),\r\n      viewStyle: 'all',\r\n      pathToMergeOperations: new Map(),\r\n      hashToDupeData: new Map()\r\n    };\r\n\r\n    const {getTreesResponse, leftBranchName, rightBranchName} = props;\r\n\r\n    const leftTreeWithName = getTreesResponse.trees.find(tree => tree.treename === leftBranchName);\r\n    const rightTreeWithName = getTreesResponse.trees.find(tree => tree.treename === rightBranchName);\r\n    if (!leftTreeWithName)\r\n      throw new Error('cant find tree with name: ' + leftBranchName);\r\n    if (!rightTreeWithName)\r\n      throw new Error('cant find tree with name: ' + rightBranchName);\r\n    const treeFileOne = leftTreeWithName.treefile;\r\n    const treeFileTwo = rightTreeWithName.treefile;\r\n    this.leftTreeFile = treeFileOne;\r\n    this.rightTreeFile = treeFileTwo;\r\n\r\n    this.rows = [];\r\n    const leftFiles = treeFileOne.files;\r\n    const rightFiles = treeFileTwo.files;\r\n    let leftIndex = 0;\r\n    let rightIndex = 0;\r\n    while (leftIndex < leftFiles.length || rightIndex < rightFiles.length) {\r\n      const leftFilename = leftIndex < leftFiles.length ? leftFiles[leftIndex].path : null;\r\n      const rightFilename = rightIndex < rightFiles.length ? rightFiles[rightIndex].path : null;\r\n      if (!leftFilename || (rightFilename && rightFilename < leftFilename)) {\r\n        this.rows.push({\r\n          right: rightFiles[rightIndex++]\r\n        });\r\n      } else if (!rightFilename || leftFilename < rightFilename) {\r\n        this.rows.push({\r\n          left: leftFiles[leftIndex++]\r\n        });\r\n      } else {\r\n        this.rows.push({\r\n          right: rightFiles[rightIndex++],\r\n          left: leftFiles[leftIndex++]\r\n        });\r\n      }\r\n    }\r\n\r\n    // populate hashToDuplicateFiles\r\n    const hashToFiles: Map<string, {left: Array<FileInfo>, right: Array<FileInfo>}> = new Map();\r\n    const addFile = (file: FileInfo, side: 'left'|'right') => {\r\n      let filesWithHash = hashToFiles.get(file.hash);\r\n      if (!filesWithHash) {\r\n        filesWithHash = {left: [], right: []};\r\n        hashToFiles.set(file.hash, filesWithHash);\r\n      }\r\n      filesWithHash[side].push(file);\r\n    }\r\n    this.leftTreeFile.files.forEach(file => addFile(file, 'left'));\r\n    this.rightTreeFile.files.forEach(file => addFile(file, 'right'));\r\n    this.hashToDuplicateFiles = new Map();\r\n    hashToFiles.forEach((files, hash) => {\r\n      const multipleFilesInOneSide = files.left.length > 1 || files.right.length > 1;\r\n      const singularFilesHaveDifferentPath =\r\n        files.left.length && files.right.length && files.left[0].path !== files.right[0].path;\r\n      if (multipleFilesInOneSide || singularFilesHaveDifferentPath) {\r\n        this.hashToDuplicateFiles.set(hash, files);\r\n      }\r\n    });\r\n  }\r\n\r\n  generateMergeFile() {\r\n    const output: MergeFile = {\r\n      baseBranch: this.props.leftBranchName,\r\n      otherBranch: this.props.rightBranchName,\r\n      operations: []\r\n    };\r\n\r\n    const addMergeOperations = (mergeOperations: Array<Operation>) => {\r\n      const cpOperations = [];\r\n      const rmOperations = [];\r\n      const touchOperations = [];\r\n      const mvOperations = [];\r\n\r\n      for (const operation of mergeOperations) {\r\n        switch (operation.operator) {\r\n          case 'cp':\r\n            cpOperations.push(operation);\r\n            break;\r\n          case 'rm':\r\n            rmOperations.push(operation);\r\n            break;\r\n          case 'touch':\r\n            touchOperations.push(operation);\r\n            break;\r\n          case 'mv':\r\n            mvOperations.push(operation);\r\n            break;\r\n        }\r\n      }\r\n\r\n      output.operations = output.operations.concat(mvOperations);\r\n      output.operations = output.operations.concat(cpOperations);\r\n      output.operations = output.operations.concat(rmOperations);\r\n      output.operations = output.operations.concat(touchOperations);\r\n    };\r\n\r\n    this.state.pathToMergeOperations.forEach(addMergeOperations);\r\n    this.state.hashToDupeData.forEach(dupeData => addMergeOperations(dupeData.operations));\r\n\r\n    return output;\r\n  }\r\n\r\n  apply() {\r\n    const mergeFile = this.generateMergeFile();\r\n    fetch('http://' + this.props.hostname + '/apply', {\r\n      method: 'POST',\r\n      body: JSON.stringify(mergeFile),\r\n      headers: {\r\n        'content-type': 'application/json'\r\n      }\r\n    }).catch(error => {\r\n      console.log('fetch /apply error: ', error);\r\n    });\r\n  }\r\n\r\n  save() {\r\n    const output = this.generateMergeFile();\r\n    const outputString = JSON.stringify(output, null, 2);\r\n    const blob = new Blob([outputString], {type: 'text/plain'});\r\n    const anchor = document.createElement('a');\r\n    anchor.download = 'merge.json';\r\n    anchor.href = window.URL.createObjectURL(blob);\r\n    anchor.click();\r\n  }\r\n\r\n  toggleExpanded(path: string) {\r\n    const expandedPaths = this.state.expandedPaths;\r\n    if (expandedPaths.has(path)) {\r\n      expandedPaths.delete(path);\r\n    } else {\r\n      expandedPaths.add(path);\r\n    }\r\n    this.setState({\r\n      expandedPaths\r\n    });\r\n  }\r\n\r\n  renderViewPicker() {\r\n    return (\r\n      <span style={{border: '1px solid black'}}>\r\n        view:\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"view-all\"\r\n            checked={this.state.viewStyle === 'all'}\r\n            onChange={event => {\r\n              if (!event.target.checked)\r\n                return;\r\n              this.setState({\r\n                viewStyle: 'all'\r\n              });\r\n            }} />\r\n            all\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"view-only-diff\"\r\n            checked={this.state.viewStyle === 'onlyDiff'}\r\n            onChange={event => {\r\n              if (!event.target.checked)\r\n                return;\r\n              this.setState({\r\n                viewStyle: 'onlyDiff'\r\n              });\r\n            }} />\r\n            only diff\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"view-only-operations\"\r\n            checked={this.state.viewStyle === 'onlyChanges'}\r\n            onChange={event => {\r\n              if (!event.target.checked)\r\n                return;\r\n              this.setState({\r\n                viewStyle: 'onlyChanges'\r\n              });\r\n            }} />\r\n            only changes\r\n        </label>\r\n        <label>\r\n          <input\r\n            type=\"radio\"\r\n            name=\"view-only-duplicates\"\r\n            checked={this.state.viewStyle === 'onlyDuplicates'}\r\n            onChange={event => {\r\n              if (!event.target.checked)\r\n                return;\r\n              this.setState({\r\n                viewStyle: 'onlyDuplicates'\r\n              });\r\n            }} />\r\n            duplicates\r\n        </label>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  overwriteOperations(newOperations: Array<Operation>) {\r\n    const pathToMergeOperations = new Map();\r\n    for (const operation of newOperations) {\r\n      const path = operation.operands[0].relativePath;\r\n      let operations = [];\r\n      if (pathToMergeOperations.has(path))\r\n        operations = pathToMergeOperations.get(path);\r\n      operations.push(operation);\r\n      pathToMergeOperations.set(path, operations);\r\n    }\r\n    this.setState({\r\n      pathToMergeOperations\r\n    });\r\n  }\r\n\r\n  renderPresetPicker() {\r\n    return (\r\n      <span style={{border: '1px solid black'}}>\r\n        apply preset:\r\n        <button\r\n          onClick={() => this.overwriteOperations(mirrorBaseToOther(this.leftTreeFile, this.rightTreeFile))}>\r\n          mirror \"{this.props.leftBranchName}\" => \"{this.props.rightBranchName}\"\r\n        </button>\r\n        <button\r\n          onClick={() => this.overwriteOperations(mirrorBaseToOther(this.rightTreeFile, this.leftTreeFile))}>\r\n          mirror \"{this.props.rightBranchName}\" => \"{this.props.leftBranchName}\"\r\n        </button>\r\n        <button\r\n          onClick={() => this.overwriteOperations(oneWayAdd(this.leftTreeFile, this.rightTreeFile))}>\r\n          one way update \"{this.props.leftBranchName}\" => \"{this.props.rightBranchName}\"\r\n        </button>\r\n        <button\r\n          onClick={() => this.overwriteOperations(oneWayAdd(this.rightTreeFile, this.leftTreeFile))}>\r\n          one way update \"{this.props.rightBranchName}\" => \"{this.props.leftBranchName}\"\r\n        </button>\r\n        <button\r\n          onClick={() => this.overwriteOperations(twoWayMerge(this.leftTreeFile, this.rightTreeFile))}>\r\n          two-way merge\r\n        </button>\r\n      </span>\r\n    );\r\n  }\r\n\r\n  revertChangesBelowLastChange() {\r\n    if (!this.lastPathModified)\r\n      return;\r\n\r\n    const modifiedPaths: Set<string> = new Set();\r\n    this.state.pathToMergeOperations.forEach((value, key) => {\r\n      modifiedPaths.add(key);\r\n    });\r\n\r\n    if (!modifiedPaths.has(this.lastPathModified))\r\n      return;\r\n\r\n    const alphabeticalModifiedPaths: Array<String> = [];\r\n    modifiedPaths.forEach(path => {\r\n      alphabeticalModifiedPaths.push(path);\r\n    });\r\n    alphabeticalModifiedPaths.sort();\r\n\r\n    const pathsToKeep: Set<String> = new Set();\r\n    const lastIndex = alphabeticalModifiedPaths.indexOf(this.lastPathModified);\r\n    for (let i = 0; i <= lastIndex; i++) {\r\n      pathsToKeep.add(alphabeticalModifiedPaths[i]);\r\n    }\r\n\r\n    const pathToMergeOperations = new Map();\r\n    this.state.pathToMergeOperations.forEach((value, key) => {\r\n      if (pathsToKeep.has(key)) {\r\n        pathToMergeOperations.set(key, value);\r\n      }\r\n    });\r\n    this.setState({\r\n      pathToMergeOperations\r\n    });\r\n  }\r\n\r\n  renderBanner() {\r\n    return (\r\n      <div className=\"sticky\">\r\n        <div>\r\n          <button\r\n            className=\"comparer-left-button\"\r\n            onClick={() => this.save()}>\r\n            save\r\n          </button>\r\n          <button onClick={() => this.apply()}>apply</button>\r\n          {this.renderViewPicker()}\r\n          {this.renderPresetPicker()}\r\n          <button onClick={() => this.revertChangesBelowLastChange()}>\r\n            revert all changes below last change\r\n          </button>\r\n        </div>\r\n        <div className=\"split-container\">\r\n          <div className=\"split-child comparer-branch-title\">\r\n            {this.props.leftBranchName}\r\n          </div>\r\n          <div className=\"split-child comparer-branch-title\">\r\n            {this.props.rightBranchName}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getMergeOperationsForPath(path: string): Array<Operation> {\r\n    if (!this.state.pathToMergeOperations.has(path))\r\n      this.state.pathToMergeOperations.set(path, []);\r\n    // @ts-ignore\r\n    return this.state.pathToMergeOperations.get(path);\r\n  }\r\n\r\n  setMergeOperationsForPath(path: string, operations: Array<Operation>) {\r\n    this.lastPathModified = path;\r\n    const pathToMergeOperations = this.state.pathToMergeOperations;\r\n    pathToMergeOperations.set(path, operations);\r\n    this.setState({\r\n      pathToMergeOperations\r\n    });\r\n  }\r\n\r\n  renderRow(row: {left?: FileInfo, right?: FileInfo}) {\r\n    let path: string = '';\r\n    if (row.left)\r\n      path = row.left.path;\r\n    else if (row.right)\r\n      path = row.right.path;\r\n    if (!path) {\r\n      console.error('this should never happen. row: ', row);\r\n      return [];\r\n    }\r\n    const mergeOperations = this.getMergeOperationsForPath(path);\r\n\r\n    const expanded = this.state.expandedPaths.has(path);\r\n\r\n    let diffState: 'same'|'diffmtime'|'diffhash'|'onlyone' = 'onlyone';\r\n    if (row.left && row.right) {\r\n      if (row.left.hash === row.right.hash) {\r\n        if (row.left.mtimeS === row.right.mtimeS && row.left.mtimeNs === row.right.mtimeNs) {\r\n          diffState = 'same';\r\n        } else {\r\n          diffState = 'diffmtime';\r\n        }\r\n      } else {\r\n        diffState = 'diffhash';\r\n      }\r\n    }\r\n\r\n    if (diffState === 'same' && this.state.viewStyle === 'onlyDiff')\r\n      return [];\r\n\r\n    // @ts-ignore\r\n    const left: FileInfo = row.left;\r\n    // @ts-ignore\r\n    const right: FileInfo = row.right;\r\n\r\n    const delet = () => {\r\n      const deleteOperations: Array<Operation> = [];\r\n      if (left) {\r\n        deleteOperations.push({\r\n          operator: 'rm',\r\n          operands: [{\r\n            tree: 'base',\r\n            relativePath: path\r\n          }]\r\n        });\r\n      }\r\n      if (right) {\r\n        deleteOperations.push({\r\n          operator: 'rm',\r\n          operands: [{\r\n            tree: 'other',\r\n            relativePath: path\r\n          }]\r\n        })\r\n      }\r\n      this.setMergeOperationsForPath(path, deleteOperations);\r\n    };\r\n\r\n    const copyLeft = () => {\r\n      this.setMergeOperationsForPath(path, [{\r\n        operator: diffState === 'diffmtime' ? 'touch': 'cp',\r\n        operands: [{\r\n          tree: 'base',\r\n          relativePath: path\r\n        }, {\r\n          tree: 'other',\r\n          relativePath: path\r\n        }]\r\n      }]);\r\n    };\r\n\r\n    const copyRight = () => {\r\n      this.setMergeOperationsForPath(path, [{\r\n        operator: diffState === 'diffmtime' ? 'touch': 'cp',\r\n        operands: [{\r\n          tree: 'other',\r\n          relativePath: path\r\n        }, {\r\n          tree: 'base',\r\n          relativePath: path\r\n        }]\r\n      }]);\r\n    };\r\n\r\n    const undo = () => {\r\n      this.setMergeOperationsForPath(path, []);\r\n    }\r\n\r\n    let mergeState: 'none'|'copy'|'delete' = 'none';\r\n    if (mergeOperations.length) {\r\n      switch (mergeOperations[0].operator) {\r\n        case 'rm':\r\n          mergeState = 'delete';\r\n          break;\r\n        case 'cp':\r\n        case 'touch':\r\n          mergeState = 'copy';\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (mergeState === 'none' && this.state.viewStyle === 'onlyChanges')\r\n      return [];\r\n\r\n    const renderButtonRowItems = () => {\r\n      if (mergeState !== 'none') {\r\n        return [\r\n          <button\r\n            key={path + ' comparer-button-row-child'}\r\n            className=\"comparer-button-row-child\"\r\n            onClick={() => undo()}>\r\n              undo\r\n          </button>\r\n        ];\r\n      }\r\n\r\n      const key =\r\n        'left' + (left ? left.path : 'null')\r\n        + 'right' + (right ? right.path : 'null');\r\n      const deleteButton = (\r\n        <button\r\n            key={'deleteButton' + key}\r\n            className=\"comparer-button-row-child comparer-left-button\"\r\n            onClick={() => delet()}>\r\n          {diffState === 'onlyone' ? 'delete' : 'delete both'}\r\n        </button>\r\n      );\r\n      const pickLeftButton = (\r\n        <button\r\n          key={'pickLeftButton' + key}\r\n          className=\"comparer-button-row-child comparer-pick-button\"\r\n          onClick={() => copyLeft()}>\r\n          pick left\r\n        </button>\r\n      );\r\n      const pickRightButton = (\r\n        <button\r\n          key={'pickRightButton' + key}\r\n          className=\"comparer-button-row-child comparer-pick-button\"\r\n          onClick={() => copyRight()}>\r\n          pick right\r\n        </button>\r\n      );\r\n\r\n      switch (diffState) {\r\n        case 'same':\r\n          return [\r\n            deleteButton\r\n          ];\r\n\r\n        case 'onlyone':\r\n          if (left) {\r\n            return [\r\n              deleteButton,\r\n              pickLeftButton\r\n            ];\r\n          } else {\r\n            return [\r\n              deleteButton,\r\n              pickRightButton\r\n            ];\r\n          }\r\n\r\n        case 'diffmtime':\r\n        case 'diffhash':\r\n          return [\r\n            deleteButton,\r\n            pickLeftButton,\r\n            pickRightButton\r\n          ];\r\n      }\r\n    };\r\n\r\n    const renderStatusIcon = () => {\r\n      const filledSquare = '\\u2b1b';\r\n      const emptySquare = '\\u2b1c';\r\n      const leftArrow = '\\u2190';\r\n      const rightArrow = '\\u2192';\r\n\r\n      const leftIcon = left ? filledSquare : emptySquare;\r\n      const rightIcon = right ? filledSquare : emptySquare;\r\n      let color: 'white'|'yellow'|'green'|'blue'|'red' = 'white';\r\n      let text = `${leftIcon}   ${rightIcon}`;\r\n      let className = '';\r\n      let tooltipText = '';\r\n\r\n      switch (mergeState) {\r\n        case 'none':\r\n          switch (diffState) {\r\n            case 'same':\r\n              color = 'green';\r\n              text = `${leftIcon} = ${rightIcon}`;\r\n              tooltipText = `\"${this.props.leftBranchName}\" and \"${this.props.rightBranchName}\" are identical`;\r\n              break;\r\n            case 'onlyone':\r\n              color = 'red';\r\n              text = `${leftIcon}   ${rightIcon}`;\r\n              tooltipText = left\r\n                ? `\"${this.props.leftBranchName}\" has this file, \"${this.props.rightBranchName}\" does not`\r\n                : `\"${this.props.leftBranchName}\" doesn't have this file, \"${this.props.rightBranchName}\" has it`;\r\n              break;\r\n            case 'diffhash':\r\n              color = 'red';\r\n              text = `${leftIcon} ~ ${rightIcon}`;\r\n              tooltipText = `files have different contents`;\r\n              break;\r\n            case 'diffmtime':\r\n              color = 'yellow';\r\n              text = `${leftIcon} ~ ${rightIcon}`;\r\n              tooltipText = `files have different modified time, but same content`;\r\n              break;\r\n          }\r\n          break;\r\n\r\n        case 'copy':\r\n          color = 'blue';\r\n          const arrowIcon = mergeOperations[0].operands[0].tree === 'base' ? rightArrow : leftArrow;\r\n          text = `${leftIcon} ${arrowIcon} ${rightIcon}`;\r\n          tooltipText = `copying \"${this.props.leftBranchName}\" ${arrowIcon} \"${this.props.rightBranchName}\"`;\r\n          break;\r\n\r\n        case 'delete':\r\n          color = 'blue';\r\n          className = 'strikethrough';\r\n          text = `${leftIcon}   ${rightIcon}`;\r\n          if (left && right) {\r\n            tooltipText = `deleting both \"${this.props.leftBranchName}\"s and \"${this.props.rightBranchName}\"s copies of this file`;\r\n          } else if (left) {\r\n            tooltipText = `deleting \"${this.props.leftBranchName}\"s copy of this file`;\r\n          } else {\r\n            tooltipText = `deleting \"${this.props.rightBranchName}\"s copy of this file`;\r\n          }\r\n          break;\r\n      }\r\n\r\n      switch (color) {\r\n        case 'white':\r\n          break;\r\n        case 'blue':\r\n          className += ' blue-bg-color';\r\n          break;\r\n        case 'green':\r\n          className += ' green-bg-color';\r\n          break;\r\n        case 'red':\r\n          className += ' error-bg-color';\r\n          break;\r\n        case 'yellow':\r\n          className += ' warning-bg-color';\r\n          break;\r\n      }\r\n\r\n      className += ' monospace comparer-status-icon';\r\n\r\n      return <span key={path + ' status icon'} className={className} title={tooltipText}> {text} </span>;\r\n    }\r\n\r\n    const renderButtonRow = () => {\r\n      return [\r\n        <div className=\"comparer-button-row-container\" key={path + ' comparer-button-row-container'}>\r\n          {renderButtonRowItems()}\r\n        </div>,\r\n        renderStatusIcon(),\r\n        <span className=\"monospace clip-overflow cursor-pointer\"\r\n            onClick={() => toggleExpanded()}\r\n            key={path + ' omaewa'}>\r\n          {path}\r\n        </span>\r\n      ];\r\n    }\r\n\r\n    const renderDetailedRowCell = (fileInfo?: FileInfo, otherFileInfo?: FileInfo) => {\r\n      if (!fileInfo) {\r\n        return (\r\n          <div className=\"datagrid-cell disabled-bg-color center-text\">\r\n            not present\r\n          </div>\r\n        );\r\n      }\r\n\r\n      const fileInfoToDetailFields = (fileInfo?: FileInfo): Map<string, string> => {\r\n        const detailFields: Map<string, string> = new Map();\r\n        if (!fileInfo)\r\n          return detailFields;\r\n\r\n        detailFields.set('path', fileInfo.path);\r\n        detailFields.set('modified time', fileInfoToDateString(fileInfo));\r\n        detailFields.set('size', filesize(fileInfo.size));\r\n        detailFields.set('hash', fileInfo.hash);\r\n        if (fileInfo.customAttributeNameToValue) {\r\n          for (const [name, value] of Object.entries(fileInfo.customAttributeNameToValue)) {\r\n            detailFields.set(name, value);\r\n          }\r\n        }\r\n        return detailFields;\r\n      }\r\n\r\n      const detailFields = fileInfoToDetailFields(fileInfo);\r\n      const otherDetailFields = fileInfoToDetailFields(otherFileInfo);\r\n\r\n      return (\r\n        <div className=\"datagrid-cell monospace\">\r\n          <table className=\"table-borders\">\r\n            <tbody>\r\n              {Array.from(detailFields).map(([key, value]) => {\r\n                let className = \"\";\r\n                if (otherDetailFields.get(key) !== value) {\r\n                  className = \"warning-bg-color\";\r\n                }\r\n                return (\r\n                  <tr className={className}>\r\n                    <td>{key}</td>\r\n                    <td>{value}</td>\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const renderDetailedRow = () => {\r\n      return (\r\n        <div className=\"datagrid-cell datagrid-row\">\r\n          {renderDetailedRowCell(left)}\r\n          {renderDetailedRowCell(right)}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const toggleExpanded = () => {\r\n      const expandedPaths = this.state.expandedPaths;\r\n      if (expandedPaths.has(path)) {\r\n        expandedPaths.delete(path);\r\n      } else {\r\n        expandedPaths.add(path);\r\n      }\r\n      this.setState({\r\n        expandedPaths\r\n      });\r\n    }\r\n\r\n    const output = [\r\n      <div className=\"datagrid-row comparer-border-bottom-soft clip-overflow\" key={path}>\r\n        {renderButtonRow()}\r\n      </div>\r\n    ];\r\n\r\n    if (expanded) {\r\n      output.push(\r\n      <div\r\n        className=\"datagrid-row comparer-bottom-row\">\r\n        {renderDetailedRow()}\r\n      </div>\r\n      );\r\n    }\r\n\r\n    return output;\r\n  }\r\n\r\n  renderDuplicatesRow(\r\n      hash: string,\r\n      leftFiles: Array<FileInfo>,\r\n      rightFiles: Array<FileInfo>,\r\n      leftWastedSpace: number,\r\n      rightWastedSpace: number) {\r\n    const rows: Array<JSX.Element> = [];\r\n    const addFile = (side: 'left'|'right', file: FileInfo) => {\r\n\r\n      const choosePath = () => {\r\n        const hashToDupeData = this.state.hashToDupeData;\r\n        const files = this.hashToDuplicateFiles.get(file.hash);\r\n        if (!files) return;\r\n        const operations: Array<Operation> = [];\r\n        // files.left must have one copy at the right path,\r\n        // and files.right must also have only one copy at the right path.\r\n        // if one side doesn't have any copy of the file, then just do nothing with that side.\r\n\r\n        const addOperationsForSide = (files: Array<FileInfo>, side: 'left'|'right') => {\r\n          if (!files.length)\r\n            return;\r\n\r\n          const path = file.path;\r\n          const sideToProtocol: 'base'|'other' = side === 'left' ? 'base' : 'other';\r\n\r\n          const deleteFile = (file: FileInfo) => {\r\n            operations.push({\r\n              operator: 'rm',\r\n              operands: [{\r\n                tree: sideToProtocol,\r\n                relativePath: file.path\r\n              }]\r\n            });\r\n          };\r\n\r\n          // do we already have a file in the right spot? if so just delete the others.\r\n          if (files.find(file => file.path === path)) {\r\n            // delete all but the one we found\r\n            for (const file of files) {\r\n              if (file.path === path)\r\n                continue;\r\n              deleteFile(file);\r\n            }\r\n\r\n          } else {\r\n            // move the first occurence to the desired path,\r\n            // then delete the rest.\r\n            operations.push({\r\n              operator: 'mv',\r\n              operands: [{\r\n                tree: sideToProtocol,\r\n                relativePath: files[0].path\r\n              }, {\r\n                tree: sideToProtocol,\r\n                relativePath: path\r\n              }]\r\n            });\r\n            for (let i = 1; i < files.length; i++) {\r\n              deleteFile(files[i]);\r\n            }\r\n          }\r\n        };\r\n\r\n        addOperationsForSide(leftFiles, 'left');\r\n        addOperationsForSide(rightFiles, 'right');\r\n        hashToDupeData.set(file.hash, {operations, selectedPath: file.path});\r\n        this.setState({\r\n          hashToDupeData\r\n        });\r\n      };\r\n\r\n      const undo = () => {\r\n        this.state.hashToDupeData.delete(file.hash);\r\n        this.setState({\r\n          hashToDupeData: this.state.hashToDupeData\r\n        });\r\n      };\r\n\r\n      const chooseButton = (\r\n        <button\r\n          title=\"choose this path for all duplicate files\"\r\n          onClick={() => choosePath()}>\r\n          choose this path\r\n        </button>\r\n      );\r\n\r\n      const undoButton = (\r\n        <button\r\n          title=\"undo changes for this hash\"\r\n          onClick={() => undo()}>\r\n          undo\r\n        </button>\r\n      )\r\n\r\n      // is this row's path being picked?\r\n      const dupeData = this.state.hashToDupeData.get(file.hash);\r\n      if (dupeData && dupeData.selectedPath === file.path) {\r\n      }\r\n\r\n      let mergeState: 'none'|'deleting'|'selecting' = 'none';\r\n      if (dupeData) {\r\n        if (dupeData.selectedPath === file.path) {\r\n          mergeState = 'selecting';\r\n        } else {\r\n          mergeState = 'deleting';\r\n        }\r\n      }\r\n\r\n      let button = null;\r\n      let className = 'comparer-duplicates-path monospace';\r\n      switch (mergeState) {\r\n        case 'none':\r\n          button = chooseButton;\r\n          break;\r\n        case 'deleting':\r\n          button = <button disabled>deleting</button>\r\n          className += ' strikethrough';\r\n          break;\r\n        case 'selecting':\r\n          button = undoButton;\r\n          break;\r\n      }\r\n\r\n      rows.push(\r\n        <div className=\"comparer-duplicates-row-entry\">\r\n          {button}\r\n          <div className=\"comparer-duplicates-branch\">\r\n            {side === 'left' ? this.props.leftBranchName : this.props.rightBranchName}\r\n          </div>\r\n          <div className={className}>\r\n            {file.path}\r\n          </div>\r\n        </div>\r\n      );\r\n    };\r\n    leftFiles.forEach(file => addFile('left', file));\r\n    rightFiles.forEach(file => addFile('right', file));\r\n\r\n    return [\r\n      <div className=\"datagrid-row comparer-duplicates-title\">\r\n        hash: {hash}\r\n        <br /> left wasted space: {filesize(leftWastedSpace)}<br />\r\n        right wasted space: {filesize(rightWastedSpace)}\r\n      </div>\r\n    ].concat(rows);\r\n  }\r\n\r\n  chooseLeftDuplicates() {\r\n    throw new Error('TODO');\r\n  }\r\n\r\n  chooseRightDuplicates() {\r\n    throw new Error('TODO');\r\n  }\r\n\r\n  renderDuplicates() {\r\n    const rows = Array.from(this.hashToDuplicateFiles.entries())\r\n      .map(([hash, files]) => {\r\n        const getWastedSpace = (files: Array<FileInfo>) => {\r\n          if (files.length < 2)\r\n            return 0;\r\n          return files[0].size * (files.length - 1);\r\n        };\r\n        return {\r\n          hash,\r\n          left: files.left,\r\n          right: files.right,\r\n          leftWastedSpace: getWastedSpace(files.left),\r\n          rightWastedSpace: getWastedSpace(files.right)\r\n        };\r\n      }).sort((a, b) => {\r\n        // larger files should have lower index\r\n        // if a is bigger then return less than zero\r\n        const aWastedSpace = a.leftWastedSpace + a.rightWastedSpace;\r\n        const bWastedSpace = b.leftWastedSpace + b.rightWastedSpace;\r\n        if (aWastedSpace > bWastedSpace) {\r\n          return -1;\r\n        } else if (aWastedSpace < bWastedSpace) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n\r\n    return [\r\n      <button\r\n        onClick={() => this.chooseLeftDuplicates()}>\r\n        choose left paths\r\n      </button>,\r\n      <button\r\n        onClick={() => this.chooseRightDuplicates()}>\r\n        choose right paths\r\n      </button>,\r\n      <div className=\"datagrid\">\r\n        {rows.flatMap(row => {\r\n          return this.renderDuplicatesRow(row.hash, row.left, row.right, row.leftWastedSpace, row.rightWastedSpace);\r\n        })}\r\n      </div>\r\n    ];\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"comparer\">\r\n        {this.renderBanner()}\r\n\r\n        {this.state.viewStyle === 'onlyDuplicates' ? this.renderDuplicates() :\r\n          <div className=\"datagrid\">\r\n            {this.rows.flatMap((row, index)=> {\r\n              return this.renderRow(row);\r\n            })}\r\n          </div>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction fileInfoToDateString(fileInfo: FileInfo): string {\r\n  return new Date(fileInfo.mtimeS * 1000).toISOString();\r\n}\r\n\r\nexport default TreeFilesComparer;","import React, { ReactNode } from 'react';\nimport './App.css';\nimport ServerPicker from './ServerPicker';\nimport PismoClient from './PismoClient';\nimport LoadingScreen from './LoadingScreen';\nimport BranchesPicker from './BranchesPicker';\nimport TreeFilesComparer from './TreeFilesComparer';\nimport { GetTreesResponse } from './PismoTypes';\n\nclass App extends React.Component {\n  state: { currentComponent: ReactNode };\n\n  constructor(props: Readonly<{}>) {\n    super(props);\n    this.state = {\n      currentComponent: <p>hello world</p>\n    };\n    this.run().catch(error => {\n      // TODO turn this off for production?\n      this.setState({\n        currentComponent: <p>error: {error.stack}</p>\n      });\n    });\n  }\n\n  async run() {\n    const serverAddress: string = await new Promise(resolve => {\n      const serverPicker = <ServerPicker onServerPicked={resolve} />;\n      this.state = {\n        currentComponent: serverPicker\n      };\n    });\n\n    const pismoClient = new PismoClient(serverAddress);\n    const getTreesPromise = pismoClient.getTrees();\n    this.setState({\n      currentComponent: <LoadingScreen promise={getTreesPromise} />\n    });\n    let trees: GetTreesResponse = await getTreesPromise;\n    if (!trees.trees.length) {\n      this.setState({\n        currentComponent: <p>server has no trees!</p>\n      });\n      return;\n    }\n\n    const {leftBranchName, rightBranchName} = await new Promise(resolve => {\n      const branchesPicker = <BranchesPicker getTreesResponse={trees} onBranchesPicked={resolve} />\n      this.setState({\n        currentComponent: branchesPicker\n      });\n    });\n\n    const comparer = <TreeFilesComparer\n      hostname={serverAddress}\n      getTreesResponse={trees}\n      leftBranchName={leftBranchName}\n      rightBranchName={rightBranchName} />;\n    this.setState({\n      currentComponent: comparer\n    });\n  }\n\n  render() {\n    return this.state.currentComponent;\n  }\n}\n\nexport default App;\n\n// TODO add a checkbox for dry run mode\n// TODO make the files expandable for more info or have a tooltip or expanded / not expanded mode\n// TODO use viewporting with a search menu to find the right file that fuzzy searches for a file then you press enter on a dropdown and go to that one\n\n// another toolbar:\n// twosplit centered text with name of each branch\n// can i also put the absolute path of each one? maybe have it be expandable?\n// center another button to save/export/apply changes\n\n// file difference cases:\n// 1. files have the same hash and mtime\n//    - make entire row have green bg color\n//    - put text saying theyre the same?\n//    - buttons:\n//      - delete both\n// 2. files have the same hash but different mtime\n//    - make entire row have yellow bg color\n//    - add text saying files are identical with different mtime?\n//    - visually indicate which file is newer\n//    - buttons:\n//      - delete both\n//      - copy mtime on both sides\n// 3. files have different hashes (mtime doesn't matter)\n//    - make entire row have red bg color\n//    - add text saying files are different\n//    - visually indicate which file is newer\n//    - buttons:\n//      - delete both\n//      - copy file (and mtime) on each side\n// 4. one file is present and the other is not\n//    - make entire row... red or gray?\n//    - buttons:\n//      - delete both\n//      - copy file (and mtime) on each side\n\n// use cases:\n// 1. copy mtime from one file to another\n// 2. copy contents and mtime from one file to another\n// 3. delete one file and keep the other\n// 4. delete both files\n\n// TODO make it so you can apply a preset to all the files from the toolbar?","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst pismoVersionKey = 'pismoversion';\nconst pismoVersion = window.localStorage.getItem(pismoVersionKey);\nif (!pismoVersion) {\n  window.localStorage.setItem(pismoVersionKey, '0.0.1');\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\nserviceWorker.register();\n"],"sourceRoot":""}