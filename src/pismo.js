#!/usr/bin/env node

const yargs = require('yargs');

const {list} = require('./list.js');
const {add} = require('./add.js');
const {update} = require('./update.js');

function run(fn) {
  return function(argv) {
    fn(argv).catch(err => {
      console.log('Pismo failed with error:');
      console.log(err);
    });
  }
}

// TODO delet this
const defaultHandler = argv => console.log('Not implemented yet. argv: ' + JSON.stringify(argv, null, 2));

yargs
  .command(
    'list',
    'Lists directory trees stored in ~/.pismo.',
    yargs => yargs
        .help(false)
        .version(false),
    //argv => list(argv).catch(catcher))
    run(list))

  .command(
    'add <name> <path>',
    'Adds a new directory tree to ~/.pismo named <name> and rooted at the filepath <path>.',
    yargs => yargs
        .option('noupdate', {
          description: "Don't run a scan on the new file tree",
          default: false
        })
        .help(false)
        .version(false),
    run(add))

  .command(
    'list-remote <ip>',
    'Lists the directory trees stored on a remote computer.',
    yargs => yargs
        .positional('ip', {
          description: 'ip address with port. ex: 192.168.0.1:48823'
        })
        .help(false)
        .version(false),
    defaultHandler)

  .command(
    'add-remote <name> <ip> <remote-name>',
    'Adds a new directory tree stored on a remote computer.',
    yargs => yargs
        .positional('ip', {
          description: 'ip address with port. ex: 192.168.0.1:48823'
        })
        .help(false)
        .version(false),
    defaultHandler)

  .command(
    'update <name>',
    'Runs a scan on the file tree named <name>, updating the state of the tree stored in ~/.pismo',
    yargs => yargs
        .help(false)
        .version(false),
    run(update))

  .command(
    'update-remote <ip> <remote-name>',
    'Runs update on a remote computer',
    yargs => yargs
        .positional('ip', {
          description: 'ip address with port. ex: 192.168.0.1:48823'
        })
        .help(false)
        .version(false),
    defaultHandler)

  .command(
    'diff <base> <other>',
    'Compares the contents of the directory trees named <base> and <other>, and prints out the differences.',
    yargs => yargs
        .help(false)
        .version(false),
    defaultHandler)

  .command(
    'merge-gen <base> <other> <output>',
    'Compares the directory trees named <base> and <other> and writes a merge file to the path <output>, which can then be applied by using merge-apply.',
    yargs => yargs
        .option('mode', {
          choices: ['one-way-mirror', 'two-way-sync'],
          default: 'one-way-mirror',
          description: 'Preset to generate merge file with'
        })
        .help(false)
        .version(false),
    defaultHandler)

  .command(
    'merge-apply <mergefile>',
    'Copies and moves files based on the contents in <mergefile>, which is generated by using merge-gen',
    yargs => yargs
        .help(false)
        .version(false),
    defaultHandler)

  .command(
    'server [port]',
    'Runs a pismo protocol server so this computer can be synced by a remote client.',
    yargs => yargs
        .positional('port', {
          description: 'port to bind on',
          default: 48821
        })
        .help(false)
        .version(false),
    defaultHandler)

  .command(
    'http [port]',
    'Runs a web interface to use pismo on this computer instead of the cli.',
    yargs => yargs
        .positional('port', {
          description: 'port to bind http server to',
          default: 48880
        })
        .help(false)
        .version(false),
    defaultHandler)

  // TODO add global config to change ~/.pismo to custom directory

  .demandCommand()
  .strict()
  // .wrap(Math.min(80, yargs.terminalWidth()) // default
  .wrap(null)
  .argv;
